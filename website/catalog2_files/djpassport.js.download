(function () {
    // 动态加载js
    function loadJs (url, id, done) {
        if (!id || !url) return console.warn('id or url is not given ...')
        var node = document.getElementById(id)
        if (node) {
            // url已经被加载，不用重复加载
            if(done) done()
            return
        }
        node = document.createElement('script')
        node.id = id
        node.async = false
        var supportOnload = 'onload' in node
        if (supportOnload) {
            node.onload = function () {
                if(done) done()
            }
            node.onerror = function () {
                console.error(url + '加载失败')
                // todo，应该重试加载
            }
        } else {
            node.onreadystatechange = function () {
                if (/loaded|complete/i.test(node.readyState)) {
                    if(done) done()
                }
            }
        }
        node.src = url
        document.getElementsByTagName('head')[0].appendChild(node)
    }
    // 获取cookie的方法
    function __getCookie (name) {
        var result
        return (result = new RegExp('(?:^|; )' + encodeURIComponent(name) + '=([^;]*)').exec(document.cookie)) ? decodeURIComponent(result[1]) : null
    }
    //支付宝小程序判断
    var isZfbMini = /AlipayClient/gi.test(navigator.userAgent) && /MiniProgram/gi.test(navigator.userAgent)
    // 平台支付宝小程序判断
    var _djappid = __getCookie('dj_appid');
    var _djhmsr = __getCookie('dj_hmsr')
    var isPtZfbMini = isZfbMini && (_djhmsr === 'zfbmini' || _djappid === '82')

    //--------------原代码------------------------------------------------
    var __env = 'production'
	var strCurDomain = document.domain;
	var popupLoginJsSrc= "//static-fe-cdn.daojia.com/pt/project/h5-login-components/dist/main.js";
    if (strCurDomain != null && strCurDomain.indexOf(".djtest.cn") >= 0) {
        __env = 'test'
		popupLoginJsSrc = "//static.djtest.cn/pt/project/h5-login-components/dist/main.js";
        if (strCurDomain.indexOf("box") >= 0 || strCurDomain.indexOf("dop7.djtest.cn") >= 0 || strCurDomain.indexOf("alprod") >= 0) {
            __env = 'sandbox'
			popupLoginJsSrc = "//static-box.djtest.cn/pt/project/h5-login-components/dist/main.js";
		}
    }
    // var popupLoginJs = document.createElement("script");
	// popupLoginJs.src = popupLoginJsSrc;
    // popupLoginJs.async = false;
	// var s = document.getElementsByTagName("script")[0];
    // s.parentNode.insertBefore(popupLoginJs, s);
    // 平台支付宝小程序不需要加载这个js
    if (isPtZfbMini) {
        if (!window.__djAlipayH5) {
            var _STATIC_HOST_CONF = {
                test: 'https://ptfe.djtest.cn',
                sandbox: 'https://static-box.djtest.cn',
                production: 'https://static-fe-cdn.daojia.com'
            }

            window.__djAlipayH5 = {
                aliJsSdk: {
                    id: '_alijssdk_',
                    url: 'https://appx/web-view.min.js',
                    state: 'unload',
                    done: []
                },
                djAliPaySdk: {
                    id: '_djalipaysdk_',
                    url: _STATIC_HOST_CONF[ __env ] + '/assets/project/djalipay-jssdk/djalipay.js',
                    state: 'unload',
                    done: []
                },
                hasReady: false,
                readyCallback: [],
                loadRes: function (res, done) {
                    if (!res) {
                        console.error('res not given ...')
                        return
                    }
                    if (res.state === 'ready') {
                        // 资源已经加载完毕
                        done()
                        return
                    }
                    // 对于loading或没有load的资源，把done添加到回调队列中
                    res[ 'done' ].push(done)
                    if (res.state === 'loading') {
                        // 资源加载中
                        return
                    }

                    var url = res.url
                    var id = res.id
                    // 资源没有加载，异步加载js
                    res[ 'state' ] = 'loading'
                    loadJs(url, id, function () {
                        res[ 'state' ] = 'ready'
                        var arrDone = res['done']
                        for (var i = 0, len = arrDone.length; i < len; i++) {
                            arrDone[i]()
                        }
                        // 执行完，情况done队列
                        arrDone.length = 0
                    })

                }
            }
        }
    } else {
        loadJs(popupLoginJsSrc, '_quickLogin_')
    }


	var djtoken="dj_pstoken", djuid="dj_psuid", djexpiry="dj_pstokenexp", djextoken="dj_psextoken", uid58com="uid", phone58com="phone", needSync3="djfrtsync3",
	djsource="dj_psthsource", djappid="dj_psthappid", djthirdid="dj_psthirdid",djSyncFlag="dj_pssyncflag",protocol=window.location.protocol,isdeviceready=false,
	showloginwhenReady=false,showloginwhenReady_jumpsuccess=null,showloginwhenReady_jumpcancel=null,client="H5";


	//IE8兼容
	if (!String.prototype.trim) {
		String.prototype.trim = function () {
			return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
		};
	}

	//获取当前URL所在的域后缀
	var getDomainDJ = function(){
		var strHost = document.domain;
		var arryHost = strHost.split(".");
		var strdomain = "."+arryHost[arryHost.length-2]+"."+arryHost[arryHost.length-1];
		return strdomain;
	}

	//到家cookie规范2.0，cookie统一设置
	if (typeof window.djCookieUtils === 'object') {
		window.console && console.warn('已经引入了djCookieUtils');
		return;
	}
	var config = {
		//用户登录统计字段
		loginParam : ["djbusiness","djclient","djfrtappid","djopenid","djfrtappversion","djfrtimei","djunionid","dj_hmsr","dj_cityid","dj_location","dj_znsr","dj_hmpl"],
		//公共cookie列表数据
		publicCookie: { "dj_psuid": true, "dj_pstoken": true, "dj_pstokenexp": true, "dj_psthirdid": true, "dj_psthsource": true, "dj_psappid": true, "dj_psthappid": true, "dj_psextoken": true, "dj_pssyncflag": true, "dj_cookieid": true, "dj_cityid": true, "dj_location": true, "dj_cityname": true, "dj_hmsr": true, "dj_os": true, "dj_abtestid": true, "dj_openid": true, "dj_usergroup": true, "dj_appchannel": true, "dj_appid": true, "dj_imei": true, "dj_appversion": true, "dj_scwidth": true, "dj_scheight": true, "dj_guanwangid": true, "dj_guanwanguid": true },
		//设置路径
		path: "/",
		//设置主域名
		domain: '.' + document.domain.match(/[\w][\w-]*\.(?:com\.cn|com|cn|net|org|gov)/)[0],
		cookieMap:{"djfrttok":"dj_pstoken","djfrtuid":"dj_psuid","djfrtexp":"dj_pstokenexp","djfrtthirdid":"dj_psthirdid","djfrtthsource":"dj_psthsource","djfrtthappid":"dj_psthappid","djfrtextoken":"dj_psextoken"},
		new2oldcookieMap:{"dj_pstoken":"djfrttok","dj_psuid":"djfrtuid","dj_pstokenexp":"djfrtexp","dj_psthirdid":"djfrtthirdid","dj_psthsource":"djfrtthsource","dj_psthappid":"djfrtthappid","dj_psextoken":"djfrtextoken"}
	};
	window.djCookieUtils = {

		/**设置公共cookie
		 * @param key （string） [必传] 要设置的cookie的key必须在到家公共cookie列表里
		 * @param value（string）[必传] 要设置cookie的值
		 * @param expires（number | string | null）[可选] 不传默认设置为会话cookie，传入number格式，以天数为计算单位，如需其他粒度的时间可自行传入格式化(toUTCString)好的字符串
		 * @param options (object) [可选]{
		 *        @param noEncode (boolean) [可选，对传入的值是否进行encodeURIComponent编码，默认编码，如传入值为true，则不编码]
		 *        @param secure (boolean) [可选，默认false]
		 * }
		 * @return (string) 赋值给document.cookie的值
		 */
		setPublic: function (key, value, expires, options) {
			return this._handle('public', key, value, expires, options);
		},
		/**获取公共cookie
		 * @param key （string） [必传] 要获取的cookie的key必须在到家公共cookie列表里
		 * @param raw  (boolean) [可选] 对获取的值会默认应用decodeURIComponent解码，如需要源格式输出，请设置为true
		 * @return (string | null) 如果存在则返回的cookie的值，不存在返回null
		 */
		getPublic: function (key, raw) {
			return this._handle('public', key, { "raw": raw });
		},
		/**删除公共cookie
		 * @param key （string） [必传] 要删除的cookie的key必须在到家公共cookie列表里
		 */
		removePublic: function (key) {
			this._handle('public', key, null);
		},
		/**设置自定义cookie
		 * @param key （string） [必传] 要设置的cookie名字
		 * @param value（string）[必传] 要设置cookie的值
		 * @param expires（number | string | null）[可选] 不传默认设置为会话cookie，传入number格式，以天数为计算单位，如需其他粒度的时间可自行传入格式化(toUTCString)好的字符串
		 * @param options (object) [可选]{
		 *        @param noEncode (boolean) [可选，对传入的值是否进行encodeURIComponent编码，默认编码，如传入值为true，则不编码]
		 *        @param secure (boolean) [可选，默认false]
		 *        @param path (string) [可选，要设置cookie的路径]
		 *        @param domain (string) [可选，要设置cookie的域名]
		 * }
		 * @return (string) 赋值给document.cookie的值
		 */
		setCustom: function (key, value, expires, options) {
			return this._handle('custom', key, value, expires, options);
		},
		/**获取自定义cookie
		 * @param key （string） [必传] 要获取的cookie的key
		 * @param raw  (boolean) [可选] 对获取的值会默认应用decodeURIComponent解码，如需要源格式输出，请设置为true
		 * @return (string | null) 如果存在则返回的cookie的值，不存在返回null
		 */
		getCustom: function (key, raw) {
			return this._handle('custom', key, { "raw": raw });
		},
		/**要删除的自定义cookie
		 * @param key （string） [必传] 要删除的cookie的key
		 * @param options (object) [可选]{
		 *        @param path (string) [可选，要删除cookie的路径]
		 *        @param domain (string) [可选，要删除cookie的域名]
		 * }
		 */
		removeCustom: function (key, options) {
			this._handle('custom', key, null, null, options);
		},
		_handle: function (type, key, value, expires, options) {
			var days, time, result, decode, path, domain;

			if (type === 'public' && !config['publicCookie'][key]) {
				window.console && console.error('cookie的key不在公用参数列表中！');
				return;
			}
			if (arguments.length > 2 && String(value) !== "[object Object]") {
				options = typeof options === "object" ? options : {};
				if (value === null || value === undefined) expires = -1;
				if (typeof expires === 'number') {
					days = expires * 24 * 60 * 60 * 1000;
					time = new Date();
					time.setTime(time.getTime() + days);
					expires = time.toUTCString();
				}
				value = String(value);
				if (type === 'public') {
					path = '; path =' + config.path;
					domain = '; domain =' + config.domain;
				} else {
					path = options.path ? ('; path =' + options.path) : '';
					domain = options.domain ? ('; domain =' + options.domain) : '';
				}
				return (document.cookie = [
					encodeURIComponent(key), '=',
					options.noEncode ? value : encodeURIComponent(value),
					expires ? '; expires=' + expires : '',
					path,
					domain,
					options.secure ? '; secure' : ''
				].join(''))
			}

			options = value || {}
			decode = options.raw ? function (s) { return s } : decodeURIComponent
			return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null
		},
		getNewCookieName:function (key) {
			var newCookieName=config['cookieMap'][key];
			window.console && console.info("key="+key+",newKey="+newCookieName);
			return	newCookieName;
		},
		setCookie:function (key, value, expires, options) {
			try{
				var oldCookieName=this.getOldCookieName(key);
				if (oldCookieName){//设置老的cookie信息
					this.setCustom(oldCookieName, value, expires, {path : '/', domain : getDomainDJ()});
				}else{
					this.setCustom(key, value, expires, {path : '/', domain : getDomainDJ()});
				}
			}catch (ex) {
				window.console && console.info("key="+key+"错误");
			}
			this.setPublic(key, value, expires);
		},
		getOldCookieName:function (key) {
			var oldCookieName=config['new2oldcookieMap'][key];
			window.console && console.info("newKey="+key+",oldKey="+oldCookieName);
			return  oldCookieName;
		},
		cleanCookie:function(key,all){
			var oldCookieName=this.getOldCookieName(key);
			if(all){
				var dateNow = new Date();
				document.cookie=key+"=;domain="+getDomainDJ()+";path=/"+";expires="+dateNow.toUTCString();
				document.cookie=key+"=;domain="+document.domain+";path=/"+";expires="+dateNow.toUTCString();
				document.cookie=key+"=;path=/"+";expires="+dateNow.toUTCString();
				if (oldCookieName) {//清除新的cookie信息
					document.cookie=oldCookieName+"=;domain="+getDomainDJ()+";path=/"+";expires="+dateNow.toUTCString();
					document.cookie=oldCookieName+"=;domain="+document.domain+";path=/"+";expires="+dateNow.toUTCString();
					document.cookie=oldCookieName+"=;path=/"+";expires="+dateNow.toUTCString();
				}
			}else{
				this.removePublic(key);
				if (oldCookieName){//清除新的cookie信息
					this.removeCustom(oldCookieName, {path : '/', domain : getDomainDJ()});
				}
			}
		}
	}

	//APP端插件，只能在APP端使用
	var userAgent = navigator.userAgent;
	var cookiestr = document.cookie ;
	if(userAgent.indexOf('cdvsupport') >= 0||cookiestr.indexOf('cdvsupport') >= 0){//到家APP
		//标识客户端为到家APP，而非H5端
        client = "APP";
        if(userAgent.indexOf('wkcdvsupport') >= 0) {
            //wkwebview do nothing,会自动把js植入
        } else {
            document.write("<script type='text/javascript' src='nacodovafile/js/cdplugins.js#nacodovafile'><\/script>");
            document.write("<script type='text/javascript' src='nacodovafile/js/cordova.js#nacodovafile'><\/script>");
        }
		document.addEventListener("deviceready", djfrtonDeviceReady, false);
		function djfrtonDeviceReady(data) {
			 isdeviceready = true;
			 if(showloginwhenReady){
	            CD58UtilsPlugin.util("loginfunction",{},showloginwhenReady_jumpsuccess,showloginwhenReady_jumpcancel);
			 }
		}
	}else if(/ganji_\d*/.test(window.navigator.userAgent)){//赶集
		//当前js在赶集app环境下  ganji
		//todo 加入赶集逐级返回逻辑js
		document.write("<script type='text/javascript' src='//static.daojia.com/assets/common/js/gj/base.js'><\/script>");
		var client = "GJAPP";
		var gjAppSource = 100;
		var gjAppId = null;// ganji
		var methods = {};// ganji
		var callbacks = {};//存储回调函数 ganji
		var idCounter = 1;//给需要app回调的方法添加名称，用于添加映射关系 ganji
		var isSupportNativeAPI = true;//判断当前环境是否支持 GJNativeAPI ganji
		var gjAppId = "58ganjinativeappid";//赶集的appId默认值
		var hasGJWithoutDJ = false;//在初始化时，有赶集用户信息，但绑定未成功，没有到家用户信息
		var JSON_RPC_ERROR = {
			    PARSE_ERROR: {
			        code: -32700,
			        message: 'Parse error'
			    },
			    INVALID_REQUEST: {
			        code: -32600,
			        message: 'Invalid Request'
			    },
			    METHOD_NOT_FOUND: {
			        code: -32601,
			        message: 'Method not found'
			    },
			    INVALID_PARAMS: {
			        code: -32602,
			        message: 'Invalid params'
			    },
			    INTERNAL_ERROR: {
			        code: -32603,
			        message: 'Internal error'
			    }
			};
		window.GJNativeAPI = window.GJNativeAPI || {};// ganji

		if (!window.GJNativeAPI.send) {
		    (function () {
		        var buffer = [];
		        if (/ganji_\d*/.test(window.navigator.userAgent)) {
		            var timer = setTimeout(function () {
		                buffer.forEach(handleInternalError);
		                window.GJNativeAPI.send = handleInternalError;
		            }, 3000);

		            document.addEventListener('WebViewJavascriptBridgeReady', function () {
		                clearTimeout(timer);
		                setTimeout(function () {
		                    buffer.forEach(window.GJNativeAPI.send);
		                }, 10);
		            }, false);

		            window.GJNativeAPI.send = function (message) {
		                buffer.push(message);
		            };
		            return;
		        }
		        isSupportNativeAPI = false;
		        window.GJNativeAPI.send = handleInternalError;
		    })();
		}
		/**
		 * JS发送信息给nativeJS
		 */
		function send (message) {
			window.console && console.log('javascript -> native: ' + JSON.stringify(message));
		    window.GJNativeAPI.send(JSON.stringify(message));
		    if(window.GJNativeAPI.onMessage){
				window.console && console.log("onMessage 已经注册成功了");
		    }else{
				window.console && console.log("onMessage 尚未注册成功");
		    }
			window.console && console.log("给赶集nativeJS发送消息完毕");
		}
		/**
		 * 访问赶集nativeJS的回调函数
		 */
		window.GJNativeAPI.onMessage = function (message) {
			window.console && console.log('native -> javascript: ' + message);
		    try {
		        message = JSON.parse(message);
		    } catch (ex) {
		        return send({
		            jsonrpc: '2.0',
		            error: JSON_RPC_ERROR.PARSE_ERROR,
		            id: null
		        });
		    }
		    if (message.method) {
		        executeMethod(message);
		    } else if (message.id) {
		        handleCallback(message);
		    }
		};
		/**
		 * 执行访问赶集方法
		 */
		function executeMethod (message) {
		    var fn = methods[message.method];

		    if (!fn) {
		        send({
		            jsonrpc: '2.0',
		            error: JSON_RPC_ERROR.METHOD_NOT_FOUND,
		            id: message.id || null
		        });
		        return;
		    }
		    setTimeout(function () {
		        try {
		            fn(message.params, function (err, result) {
		                if (!message.id) {
		                    return;
		                }

		                if (err) {
		                    send({
		                        jsonrpc: '2.0',
		                        error: {
		                            code: err.code,
		                            message: err.message
		                        },
		                        id: message.id
		                    });
		                } else {
		                    send({
		                        jsonrpc: '2.0',
		                        result: result,
		                        id: message.id
		                    });
		                }
		            });
		        } catch (ex) {
		            send({
		                jsonrpc: '2.0',
		                error: {
		                    code: ex.code || -32000,
		                    message: ex.message
		                },
		                id: message.id
		            });
		        }
		    }, 0);
		}
		/**
		 * 处理回调函数
		 */
		function handleCallback (message) {
		    var callback = callbacks[message.id];
		    callbacks[message.id] = null;

		    if (!callback) {
		        return;
		    }
		    setTimeout(function () {
		        callback(message.error || null, message.result);
		    }, 0);
		}
		/**
		 * 回调函数返回结果有误，需要发送信息给nativeJS
		 */
		function handleInternalError(message) {
		    try {
		        message = JSON.parse(message);
		    } catch (ex) {
		        return;
		    }
		    if (message.id) {
		        handleCallback({
		            jsonrpc: '2.0',
		            error: JSON_RPC_ERROR.INTERNAL_ERROR,
		            id: message.id
		        });
		    }
		}
		/**
		 * 封装的对象
		 */
		function ganjiAPP(){
		}
		ganjiAPP.prototype = {
				invoke: function (method, params, callback) {
			        var message = {
			            jsonrpc: '2.0',
			            method: method,
			            params: params
			        };
			        var id;

			        if (callback) {
			            id = 'jsonp_' + idCounter;
			            idCounter++;

			            callbacks[id] = callback;
			            message.id = id;
			        }
			        send(message);
			    }
		}

		GanJi_NativeJS = new ganjiAPP();

		GanJi_NativeJS.goBack = function(tagUrl){
			GanJi_NativeJS.invoke(
		        'webViewCallback',
		        {
		            url:tagUrl
		        },
		        function (err, data) {
		        	if(data){
		                if(typeof tagUrl == 'function'){
							window.console && console.info("the data of goBack is "+data);
		                	var result={};
							result.code="0";
							result.desc="success";
							tagUrl.call(window, result);
		                }
		            }
		        	if(err){
						window.console && console.info("the err of goBack is "+err);
		        	}
		        }
		    );
		};

		/**
		 * 获取赶集用户信息
		 * 回调的方式
		 */
		GanJi_NativeJS.getUserInfo = function(successCallback,cancelCallback){
			GanJi_NativeJS.invoke(
			        'getUserInfo',
			        {
			           datatype: 2
			        },
			        function (err, data) {
			            //需要先判断err，同时要判断data不为空。因为那边可能只返回一个data的空对象
						window.console && console.log("获取赶集用户信息后的结果--->>>"+JSON.stringify(err)+"-----"+JSON.stringify(data));
			            if(!err && data && data.user_sscode){
			                if(typeof successCallback == 'function'){
								window.console && console.log("获取赶集用户信息成功返回信息,调用【getGJUserInfoSucc】");
			                    successCallback(data);
			                }
			            }else{
			            	if(typeof cancelCallback == 'function'){
								window.console && console.log("获取赶集用户信息成功返回信息,调用【getGJUserInfoFail】");
			            		cancelCallback();
			                }
			            }
			        }
			    );
		};
		/**
		 * 【api】begin ganji
		 */
		//获取赶集用户信息成功的回调,
		function getGJUserInfoSucc(data){
			//由于传输过程中#作为网页位置标记符，会将后面的内容干掉，所以这里替换
			var tempdata = JSON.stringify(data);
			tempdata = tempdata.replace(/#/g,",");
			window.console && console.log(JSON.stringify(data)+":成功:"+tempdata);
			var jsonRes = DjUser.getUserInfo();
			if(jsonRes != null){
				//有到家用户信息,进行比对
				window.console && console.log("有到家用户信息【进行数据比对】"+JSON.stringify(jsonRes));
//				var vsource = getCookieDJ(djsource);
//				var vappId = getCookieDJ(djappid);
				var vthirdId = getCookieDJ(djthirdid);
				var obj = eval("("+tempdata+")");
				window.console && console.log("user_sscode is "+obj["user_sscode"]);
				if(obj["user_sscode"] != vthirdId){
					window.console && console.log("现在的赶集用户信息与cookie中的不一样");
					cleanCookie();
					cleanCookie58();
					var callbackName = "djHasPhoneThirdCallback_"+(new Date()).getTime();
					window[callbackName]=function(returnCode,returnDesc,djfrtUid,djfrtexp,djfrttok,thirdId){
						if(returnCode == 0){
							window.console && console.log("user_sscode is "+obj["user_sscode"]);
							//写到家用户信息cookie && 赶集用户信息cookie至当前域下
							window.console && console.log("gjLoginSuccess4callback【开始】写到家用户信息cookie && 赶集用户信息cookie至当前域下<>"+djfrttok+"<>"+djfrtUid+"<>"+djfrtexp);
							setCookie(djfrttok,djfrtUid,djfrtexp,false);
							setThirdCookie(gjAppSource,gjAppId,obj["user_sscode"],false);
							window.console && console.log("gjLoginSuccess4callback【结束】写到家用户信息cookie && 赶集用户信息cookie至当前域下<>"+gjAppSource+"<>"+gjAppId+"<>"+thirdId);
						}
						setTimeout(function(){window[callbackName]=undefined;},1000);
						window.console && console.log("successFun has down");
						isdeviceready=true;
						if(showloginwhenReady){
							showloginwhenReady_jumpsuccess.call(window,DjUser.getUserInfo());
						}
					};
					/**
					 * 发起JSONP异步调用
					 * 访问后台服务，验证该信息是否有手机号
					 */
					var JSONP=document.createElement("script");
					JSONP.type="text/javascript";
					JSONP.src=strURLPrefix + "/thirdoauth/third/register1?callback="+callbackName+"&userInfo="+tempdata+"&appId="+gjAppId+"&source="+gjAppSource;
					document.getElementsByTagName("head")[0].appendChild(JSONP);
					return ;
				}else{
					window.console && console.log("现在的赶集用户信息与cookie中的一样");
					isdeviceready=true;
					if(showloginwhenReady){
						showloginwhenReady_jumpsuccess.call(window,DjUser.getUserInfo());
					}
					return ;
				}
			}else{
				//没有到家用户信息,走注册到家并绑定三方流程
				window.console && console.log("没有到家用户信息");
				var callbackName = "djHasPhoneThirdCallback_"+(new Date()).getTime();
				window[callbackName]=function(returnCode,returnDesc,djfrtUid,djfrtexp,djfrttok,thirdId){
					window.console && console.log(returnCode+":"+returnDesc+":"+djfrtUid+":"+djfrtexp+":"+djfrttok+":"+thirdId);
					if(returnCode == 0){
						var obj = eval("("+tempdata+")");
						window.console && console.log("user_sscode is "+obj["user_sscode"]);
						//写到家用户信息cookie && 赶集用户信息cookie至当前域下
						window.console && console.log("gjLoginSuccess4callback【开始】写到家用户信息cookie && 赶集用户信息cookie至当前域下<>"+djfrttok+"<>"+djfrtUid+"<>"+djfrtexp);
						setCookie(djfrttok,djfrtUid,djfrtexp,false);
						setThirdCookie(gjAppSource,gjAppId,obj["user_sscode"],false);
						window.console && console.log("gjLoginSuccess4callback【结束】写到家用户信息cookie && 赶集用户信息cookie至当前域下<>"+gjAppSource+"<>"+gjAppId+"<>"+thirdId);
						location.reload();//刷新当前页面
					}
					setTimeout(function(){window[callbackName]=undefined;},1000);
					hasGJWithoutDJ = true;
					window.console && console.log("successFun has down");
					isdeviceready=true;
					if(showloginwhenReady){
						showloginwhenReady_jumpsuccess.call(window,DjUser.getUserInfo());
					}
				};
				/**
				 * 发起JSONP异步调用
				 * 访问后台服务，验证该信息是否有手机号
				 */
				var JSONP=document.createElement("script");
				JSONP.type="text/javascript";
				JSONP.src=strURLPrefix + "/thirdoauth/third/register1?callback="+callbackName+"&userInfo="+tempdata+"&appId="+gjAppId+"&source="+gjAppSource;
				document.getElementsByTagName("head")[0].appendChild(JSONP);
				return ;
			}
		};

		//获取失败的回调
		function getGJUserInfoFail(data){
			//获取赶集用户信息失败，清空到家用户信息&&赶集用户信息即可
			window.console && console.log("*******清空cookies");
			cleanCookie();
			cleanCookie58();
			isdeviceready=true;
			if(showloginwhenReady){
				showloginwhenReady_jumpsuccess.call(window,null);
			}
			return;
		}

		/**
		 * 调起赶集登录页
		 */
		GanJi_NativeJS.login = function(successCallback,cancelCallback){
			if(hasGJWithoutDJ == true){
				//需要走校验手机号
				GanJi_NativeJS.invoke(
						'login',
						{
							logintype: 3,
							datatype: 2
						},
						function (err, data) {
							window.console && console.log("【GanJi_NativeJS.login 校验手机号】成功返回结果 "+err+"--------"+data);
							if(!err && data && data.user_sscode){
								window.console && console.log("【GanJi_NativeJS.login 校验手机号】成功返回结果");
								gjLoginSuccess(data,successCallback);
							}else{

								//todo 逐级返回优化
								if(typeof cancelCallback == 'function'){
									var result={};
									result.code="-1";
									result.desc="fail";
									cancelCallback.call(window,result);
									window.console && console.log("登录失败,走'goBack'");
									//GanJi_NativeJS.goBack();
								}else{
									window.console && console.log("cancelCallback is not a function");
								}
							}
						}
				);
			}else{
				GanJi_NativeJS.invoke(
						'login',
						{
							logintype: 2,
							datatype: 2
						},
						function (err, data) {
							window.console && console.log("【GanJi_NativeJS.login】成功返回结果 "+err+"--------"+data);
							if(!err && data && data.user_sscode){
								window.console && console.log("【GanJi_NativeJS.login】成功返回结果");
								gjLoginSuccess(data,successCallback);
							}else{
								//todo 逐级返回优化
								if(typeof cancelCallback == 'function'){
									var url = location.search;//针对于跳空白页的关闭
									if (url.indexOf("?") != -1) {
										var str = url.substr(1);
										var strs = str.split("&");
										for(var i = 0; i < strs.length; i ++) {
											if(strs[i].split("=")[0]=="direct"&&strs[i].split("=")[1]=="blank"){
												GanJi_NativeJS.goBack();
											}
										}
									}
									var result={};
									result.code="-1";
									result.desc="fail";
									cancelCallback.call(window,result);
									window.console && console.log("登录失败,走'goBack'");
									//GanJi_NativeJS.goBack();
								}else{
									window.console && console.log("cancelCallback is not a function");
								}

							}
						}
				);
			}
		}

		/**
		 * 赶集登录成功
		 * successFun 有可能是基于回调的callback函数，也有可能是redirect URL
		 */
		function gjLoginSuccess(data,successFun){
			//由于传输过程中#作为网页位置标记符，会将后面的内容干掉，所以这里替换
			var tempdata = JSON.stringify(data);
			tempdata = tempdata.replace(/#/g,",");
			window.console && console.log(JSON.stringify(data)+":成功:"+tempdata+"****"+successFun);
			var callbackName = "djHasPhoneThirdCallback_"+(new Date()).getTime();

			window[callbackName]=function(returnCode,returnDesc,djfrtUid,djfrtexp,djfrttok,thirdId){
				window.console && console.log(returnCode+":"+returnDesc+":"+djfrtUid+":"+djfrtexp+":"+djfrttok+":"+thirdId);
				if(returnCode == 0){
					var obj = eval("("+tempdata+")");
					window.console && console.log("user_sscode is "+obj["user_sscode"]);
					//写到家用户信息cookie && 赶集用户信息cookie至当前域下
					window.console && console.log("gjLoginSuccess4callback【开始】写到家用户信息cookie && 赶集用户信息cookie至当前域下<>"+djfrttok+"<>"+djfrtUid+"<>"+djfrtexp);
					setCookie(djfrttok,djfrtUid,djfrtexp,false);
					setThirdCookie(gjAppSource,gjAppId,obj["user_sscode"],false);
					window.console && console.log("gjLoginSuccess4callback【结束】写到家用户信息cookie && 赶集用户信息cookie至当前域下<>"+gjAppSource+"<>"+gjAppId+"<>"+obj["user_sscode"]);
				}
				setTimeout(function(){window[callbackName]=undefined;},1000);
				if(typeof successFun == 'function'){
					var result={};
					result.code="0";
					result.desc="success";
					successFun.call(window, result);
				}else{
					successFun = decodeURIComponent(successFun);
					successFun = decodeURIComponent(successFun);
					window.location = successFun;
				}
				window.console && console.log("successFun has down");
			};
			/**
			 * 发起JSONP异步调用
			 * 访问后台服务，验证该信息是否有手机号
			 */
			var JSONP=document.createElement("script");
			JSONP.type="text/javascript";
			JSONP.src=strURLPrefix + "/thirdoauth/third/register1?callback="+callbackName+"&userInfo="+tempdata+"&appId="+gjAppId+"&source="+gjAppSource;
			document.getElementsByTagName("head")[0].appendChild(JSONP);
		};

		/**
		 * 获取赶集经纬度信息
		 */
		GanJi_NativeJS.getLocation = function(callBack){
			GanJi_NativeJS.invoke(
				        "getlocation",
				        {},
				        function(err,data){
				            if(err){
				                return;
				            }else{
				            	window.console && console.log("获取到的经纬度信息是 "+JSON.stringify(data));
				            	callBack(data);
				            }
				        }
				    )
		};

		  if (!window.GJHybrid) {
			  window.console && console.info("初始化 GJHybrid");
			    window.GJHybrid = {}
		  }

		  window.GJHybrid = window.GJHybrid || {};

		  window.GJHybrid.registerHandler = window.GJHybrid.registerHandler || function (name, fn) {
		      methods[name] = fn;
		  };

		  window.GJHybrid.invoke = window.GJHybrid.invoke || function (method, params, callback) {
		      var message = {
		        jsonrpc: '2.0',
		        method: method,
		        params: params
		      };
		      var id;

		      if (callback) {
		        id = 'jsonp_' + idCounter;
		        idCounter++;

		        callbacks[id] = callback;
		        message.id = id;
		      }

		      send(message);
		  };

		  window.GJHybrid.isSupport = window.GJHybrid.isSupport || function () {
		      return isSupportNativeAPI;
		    };

		  Object.keys(JSON_RPC_ERROR).forEach(function (key) {
		    window.GJHybrid[key] = JSON_RPC_ERROR[key];
		  });

		  // 客户端返回上一个native页面
		  window.GJHybrid.back = window.GJHybrid.back || function () {
		      window.GJHybrid.invoke('back');
		  }

		document.addEventListener("WebViewJavascriptBridgeReady", function(){
			isdeviceready = true;
		}, false);
	}else if(typeof contact!="undefined" && typeof contact.getLoginMaskUid!="undefined"){//乐视
		window.console && console.info("client===LEYP");
		client = "LEYP";
		var LeYPSource=20;
		var leYPAppId="LeYellowPage";
		LeYP_NativeJS = {};
		//定义调起登录后的跳转地址
		LeYP_NativeJS.loginSucRedir=null;
		//定义调起登录失败后，需要执行的回调函数
		LeYP_NativeJS.loginFailFunc=null;

		/**
		 * 乐视登录成功后的回调函数
		 */
		getLeUidCallback = function(result,LeYPuid){
			if(result=="MASKUIDSUCCESS" && LeYPuid!=undefined){
				//首先将乐视的uid信息，写入到当前域名中
				setThirdCookie(LeYPSource,leYPAppId,LeYPuid,true);
				//首先根据三方信息去后端同步到家的用户信息，如果没有，则需要调起到家的登录，以便绑定手机号
				var callbackName = "communalCheckCallback_"+(new Date()).getTime();
				window[callbackName]=function(returnCode, djfrttok, djfrtUid, djfrtexp){
					window.console && console.log(returnCode+":"+djfrtUid+":"+djfrtexp+":"+djfrttok);
					if(returnCode == "0"){
						setCookie(djfrttok,djfrtUid,djfrtexp,false);
						window.location = LeYP_NativeJS.loginSucRedir;
					}else if(returnCode == "-2"){//没有绑定到家用户信息，需要调起到家的登录
						window.location = strURLPrefix+"/prelogin?returnUrl="+LeYP_NativeJS.loginSucRedir;
					}else{
						LeYP_NativeJS.loginFailFunc.call(window);
					}
					setTimeout(function(){window[callbackName]=undefined;},1000);
				};

				var JSONP=document.createElement("script");
				JSONP.type="text/javascript";
				JSONP.src=strURLPrefix + "/thirdoauth/common/check?callback="+callbackName;
				document.getElementsByTagName("head")[0].appendChild(JSONP);
			}else{
				LeYP_NativeJS.loginFailFunc.call(window, "乐视登录错误！");
			}
		}

		/**
		 * 调起乐视登录
		 */
		LeYP_NativeJS.login = function(redirect, failFunc){
			//首先判断是否已经存在乐视的用户信息，如果已经存在，直接调起到家登录，否则调起乐视本地登录，登录成功后，再调起到家登录
			var strSource = getCookieDJ(djsource);
			var strAppId = getCookieDJ(djappid);
			var strThirdId = getCookieDJ(djthirdid);
			if(isValid(strSource) && isValid(strAppId) && isValid(strThirdId)){
				window.location = strURLPrefix+"/prelogin?returnUrl="+redirect;
			}else{
				window.console && console.info("invoke leYG login method");
				LeYP_NativeJS.loginSucRedir = redirect;
				LeYP_NativeJS.loginFailFunc=failFunc;
				window.contact.getLoginMaskUid();
			}
		}

	}
	// else if(cookiestr.indexOf('58_app') >= 0){//先以此为标识
	// 	client = "58APP";
	// 	window.console && console.log("来自同城app");
	// }
	// 是否支持CORS请求
	var createCORSRequset = function(method, url) {
		var xhr = new XMLHttpRequest();
		if ("withCredentials" in xhr) {
			// Check if the XMLHttpRequest object has a "withCredentials" property.
			// "withCredentials" only exists on XMLHTTPRequest2 objects.
			xhr.open(method, url, true);
		} else if (typeof XDomainRequest != "undefined") {
			// Otherwise, check if XDomainRequest.
			// XDomainRequest only exists in IE, and is IE's way of making CORS requests.
			xhr = new XDomainRequest();
			xhr.open(method, url);
		} else {
			// Otherwise, CORS is not supported by the browser.
			xhr = null;
		}
		return xhr;
	}

	// 获取cookie信息
	var getCookieDJ = function(name){
		var cookieVal=djCookieUtils.getPublic(name);
		if(!cookieVal||cookieVal==undefined||cookieVal==""||cookieVal==null){
			var oldCookieName=djCookieUtils.getOldCookieName(name);
			cookieVal=djCookieUtils.getCustom(oldCookieName);
		}
		return cookieVal;
	}

	//获取浏览器版本信息
	var getBrowserInfo = function(){
	    var Sys = {};
	    var ua = navigator.userAgent.toLowerCase();
	    var re =/(msie|firefox|chrome|opera|applewebkit).*?([\d.]+)/;
	    var m = ua.match(re);
	    Sys.browser = m[1];
	    Sys.ver = m[2];
	    return Sys;
	}



	//校验参数合法性
	var isValid = function(param){
		if(param!=null && param!=undefined && param!=""){
			return true;
		}
		return false;
	}

	//加载完成后的初始化函数
	var loadCallback=function(token, uid, expiry){
		//标识已经初始化完毕
		isdeviceready=true;
		//检查是否有代码在初始化的时候，就需要获取用户信息
		if(showloginwhenReady){
			if(!isValid(token) || !isValid(uid) || !isValid(expiry)){
				showloginwhenReady_jumpsuccess.call(window,null);
			}else{
				var jsonUserInfo = {};
				jsonUserInfo.djfrttok = token;
				//查询出明文信息
				if(isValid(uid) && uid.indexOf("_")>0){
					var strPlainUid = uid.substring(uid.indexOf("_")+1);
					uid = uid.substring(0, uid.indexOf("_"));
					jsonUserInfo.djfrtplainuid = strPlainUid;
				}
				jsonUserInfo.djfrtuid = uid;
				jsonUserInfo.djfrtexpire = expiry;
				showloginwhenReady_jumpsuccess.call(window,jsonUserInfo);
			}
		}
	}

	//判断是否在微信站点的主域
	var isWebchatDomain = function(){
		var strCurDomain = document.domain;
		if(strCurDomain == "tjzt8.djtest.cn" || strCurDomain == "tjzt71.djtest.cn" || strCurDomain == "tjzt72.djtest.cn" || strCurDomain == "tjzt73.djtest.cn" ||
				strCurDomain == "tjzt74.djtest.cn" || strCurDomain == "tjzt75.djtest.cn" || strCurDomain == "tjzt77.djtest.cn" || strCurDomain == "jzt.daojia.com"){
			return true;
		}
		return false;
	}

	//判断是否为与passport的二级域名相同
	var isSameDomain = function(){
		var strCurDomain = getDomainDJ();
		if(strCurDomain==".djtest.cn"||strCurDomain==".daojia.com"){
			return true;
		}
		return false;
	}

	//判断是否为测试环境
	var isTestEnv = function(){
		var strCurDomain = getDomainDJ();
		if(strCurDomain==".djtest.cn"){
			return true;
		}
		return false;
	}

	/**
	 * 比对refer与当前的域名是否在同一个域名下面(线上只比对两级域名)
	 * 相同域名：true
	 * 不相同域名：false
	 */
	var compareRefer = function(referURL){
		if(referURL == undefined || referURL==null || referURL.trim()==""){
			return false;
		}
		//首先判断是否在相同的http或者https下面
		if(referURL.indexOf(window.location.protocol)!=0){
			return true;
		}
		//判断域名是否相同
		var intIndex = referURL.indexOf("//");
		var referDomain =  referURL.substring(intIndex+2);
		intIndex = referDomain.indexOf("/");
		if(intIndex!=-1){
			referDomain = referDomain.substring(0, intIndex);
		}
		var arryHost = referDomain.split(".");
		referDomain = "."+arryHost[arryHost.length-2]+"."+arryHost[arryHost.length-1];
		if(referDomain!=getDomainDJ()){
			return true;
		}
		return false;
	}

	var strURLPrefix = "http://user.daojia.com";
	if(typeof djPassportUrl !='undefined'){
		strURLPrefix = djPassportUrl;
	}
	if(protocol=="https:"){
		//将请求的地址转换为https协议格式
		if(strURLPrefix.indexOf("https:")!=0){
			strURLPrefix = "https"+strURLPrefix.substring(4);
		}
	}

	if(getDomainDJ()==".djtest.cn"){
		if(typeof djPassportUrl !='undefined'){
			strURLPrefix = djPassportUrl;
		}else if(protocol=="https:") {
			strURLPrefix = "https://user.daojia.com";//保证沙箱环境可以使用
		}
	}

	/**
	 * 设置用户信息到当前域，默认为会话级别的过期时间
	 * @param token  凭证
	 * @param encUid 加密的uid信息
	 * @param expiry 过期时间
	 * @param byExpiry 是否需要按照过期时间设置cookie的过期时间
	 */
	var setCookie = function(token,encUid,expiry,byExpiry){
		var strdomain = getDomainDJ();
		//按照实际的过期时间进行设置
		if(byExpiry!=undefined && byExpiry==true){
			var expiryDate = new Date();
			expiryDate.setTime(expiryDate.getTime()+expiry*1000);
			djCookieUtils.setCookie(djtoken, token , expiryDate.toUTCString());
			djCookieUtils.setCookie(djuid, encUid , expiryDate.toUTCString());
			djCookieUtils.setCookie(djexpiry, expiry , expiryDate.toUTCString());
		}else{//按照会话作为过期时间进行设置
			djCookieUtils.setCookie(djtoken, token );
			djCookieUtils.setCookie(djuid, encUid );
			djCookieUtils.setCookie(djexpiry, expiry );
		}
	}

	/**
	 * 设置用户信息到当前域，默认为会话级别的过期时间
	 * @param source   渠道来源
	 * @param appid    渠道具体的应用id
	 * @param thirdId  三方用户id信息
	 * @param byExpiry 是否需要按照过期时间设置cookie的过期时间
	 */
	var setThirdCookie = function(source,appId,thirdId,byExpiry){
		window.console && console.log("setThirdCookie-->>source:"+source+"---appId:"+appId+"---thirdId:"+thirdId+"---byExpiry:"+byExpiry);
		var strdomain = getDomainDJ();
		//按照实际的过期时间进行设置
		if(byExpiry!=undefined && byExpiry==true){
			window.console && console.log("【setThirdCookie】设置有过期时间的cookie begin");
			var expiryDate = new Date();
			expiryDate.setTime(expiryDate.getTime()+2592000*1000);
			window.console && console.log("【setThirdCookie】设置有过期时间的cookie doing");
			djCookieUtils.setCookie(djsource, source , expiryDate.toUTCString());
			djCookieUtils.setCookie(djappid, appId , expiryDate.toUTCString());
			djCookieUtils.setCookie(djthirdid, thirdId , expiryDate.toUTCString());
			window.console && console.log("【setThirdCookie】设置有过期时间的cookie end");
		}else{//按照会话作为过期时间进行设置
			window.console && console.log("【setThirdCookie】设置会话级别的cookie begin");
			djCookieUtils.setCookie(djsource, source );
			djCookieUtils.setCookie(djappid, appId );
			djCookieUtils.setCookie(djthirdid, thirdId );
			window.console && console.log("【setThirdCookie】设置会话级别的cookie end");
		}
	}

	/**
	 * 设置兼容的58.com域名cookie信息到
	 * 非到家公用cookie不更改
	 */
	var setCookie58 = function(uid,phone){
		//兼容测试环境，如果为测试环境，则将uid、phone信息设置到二级域名下
		if(isTestEnv()){
			var strDomain =  getDomainDJ();
			if(isValid(uid)){
				document.cookie=uid58com+"="+uid+";domain="+strDomain+";path=/";
			}
			if(isValid(phone)){
				document.cookie=phone58com+"="+phone+";domain="+strDomain+";path=/";
			}
		}else{
			if(isValid(uid)){
				document.cookie=uid58com+"="+uid+";domain="+document.domain+";path=/";
			}
			if(isValid(phone)){
				document.cookie=phone58com+"="+phone+";domain="+document.domain+";path=/";
			}
		}
	}

	/**
	 * 清除当前域名下的用户信息
	 */
	var cleanCookie = function(){
		djCookieUtils.cleanCookie(djtoken)
		djCookieUtils.cleanCookie(djuid)
		djCookieUtils.cleanCookie(djexpiry)
		//清空当前域下的三方信息，微信端公众号会在微信号切换的时候，清除所有的cookie信息
		if(client!="H5" || (client==="H5" && !isWebchatDomain())){
			djCookieUtils.cleanCookie(djsource)
			djCookieUtils.cleanCookie(djappid)
			djCookieUtils.cleanCookie(djthirdid)
		}
		window.console && console.log("清空cookies完毕");
	}

	/**
	 * 清除兼容的.58.com下的用户信息
	 * 非到家公用cookie不更改
	 */
	var cleanCookie58 = function(){
		var dateNow = new Date();
		var strdomain = getDomainDJ();
		dateNow.setDate(dateNow.getDate()-1);
		//TODO 兼容方案，将最低一级绑定的cookie也清除掉
		document.cookie=uid58com+"=;domain="+strdomain+";path=/;expires="+dateNow.toUTCString();
		document.cookie=phone58com+"=;domain="+strdomain+";path=/;expires="+dateNow.toUTCString();
		//TODO 兼容方案，将最低一级绑定的cookie也清除掉
		document.cookie=uid58com+"=;domain="+document.domain+";path=/;expires="+dateNow.toUTCString();
		document.cookie=phone58com+"=;domain="+document.domain+";path=/;expires="+dateNow.toUTCString();
		//TODO 兼容方案，清除cookie，没有设定域名的
		document.cookie=uid58com+"=;path=/;expires="+dateNow.toUTCString();
		document.cookie=phone58com+"=;path=/;expires="+dateNow.toUTCString();
	}

	//从主域获取用户信息
	var syncUserInfo = function(callbackName){
		var JSONP=document.createElement("script");
		JSONP.type="text/javascript";
		JSONP.src=strURLPrefix + "/user/setcookie?callback="+callbackName;
		document.getElementsByTagName("head")[0].appendChild(JSONP);
	}
	/**
	 * 过滤returnUrl中的信息
	 */
	var filterReturnUrl = function(redirect){
		//在到家APP当中的地址如果是native地址，则不做任何处理，直接返回
		if(redirect.indexOf("daojia")==0){
			return redirect;
		}
		//相对路径的话，补充当前域的信息
		if(redirect.indexOf("http")!=0){
			if(redirect.indexOf("/")!=0){
				redirect = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '')+"/"+redirect;
			}else{
				redirect = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '')+redirect;
			}
		}
		var intIndex = redirect.lastIndexOf("?");
		if(intIndex!=-1){
			var strUrl = redirect.substring(0,intIndex+1);
			var strPath = redirect.substr(intIndex+1);
			var strUserPath = "";
			var intCount = 0;
			var arrParams = strPath.split("&");
			for(var i=0;i<arrParams.length;i++){
				var strParam = arrParams[i];
				var arrParam = strParam.split("=");
				if(arrParam[0]!=djtoken && arrParam[0]!=djuid && arrParam[0]!=djexpiry){
					strUrl = strUrl+strParam+"&";
				}else{
					strUserPath = strUserPath+strParam+"&";
				}
			}
			//携带三个认证参数，则表明是正确的用户信息，过滤掉，否则不代表是正确的用户信息
			if(intCount<3){
				strUrl = strUrl+strUserPath;
			}
			//去除尾部的多余单个字符
			redirect = strUrl.substring(0,strUrl.length-1);
		}
		return redirect;
	}


	var createLoginParamObj = function(){
		var obj = {}
		config.loginParam.forEach(function (val) {
			var value = getCookieDJ(val);
			obj[val] = value;
        })
		return obj
	}

	/**
	 * 定义工具类 ，用户信息工具类
	 */
	var DjUser = {};

	/**
	 * 初始化方法，页面加载用户cookie信息
	 * 首先同步三方信息到主域
	 * 如果环境为app环境，则不需要同步用户信息，直接由客户端提取
	 * 如果环境为H5环境，且不存在用户信息，则需要到主域同步一次用户信息
	 * 如果环境为H5环境，且为微信入口进入，且不存在用户信息，且有置换token信息，则需要进行一次token置换，并且需要兼容微信端原有的cookie信息：uid、phone
	 * 检查是否有用户在页面还未初始化的时候，就调用获取用户信息接口，如果调用了，则需要在同步完成后，回调相关接口
	 */
	DjUser.init=function(){
		window.console && console.log("init begin");
		//非H5页面不需要同步用户信息，不做任何处理，直接返回
		if(client == "H5"){}else if(client == "GJAPP"){
			window.console && console.log("【djpassportJS init】client is GJAPP");
			//如果是赶集app来源,则需要获取赶集用户信息
			GanJi_NativeJS.getUserInfo(getGJUserInfoSucc,getGJUserInfoFail);
		}else if(client == "LEYP"){
			window.console && console.info("init=====LEYP");
			//乐视的用户信息已经在跳转入口页进行了处理，并且不存在跨域的问题，不需要做初始化操作
			isdeviceready = true;
			if(showloginwhenReady){
				showloginwhenReady_jumpsuccess.call(window,DjUser.getUserInfo());
			}
		}
		// else if (client == "58APP") {//58同城
		// 	isdeviceready = true;
		// }
	}
	//初始化后，直接执行
	DjUser.init();

	/**
	 * 如果是初始化页面的时候，就需要加载用户信息，则需要通过回调的形式
	 * 采用共享变量、接口回调的方式与初始化线程进行通信
	 */
	DjUser.getUserInfo4startup = function(callback){
		if(isdeviceready){
			var jsonRes = DjUser.getUserInfo();
			callback.call(window, jsonRes);
		}else{
			showloginwhenReady = true;
			showloginwhenReady_jumpsuccess = callback;
			//兼容h5调起时直接获取用户信息
			if(client == "H5") {
				var strToken = getCookieDJ(djtoken), strUid = getCookieDJ(djuid), strExpiry = getCookieDJ(djexpiry);
				loadCallback(strToken, strUid, strExpiry);
			}
		}
	}

	/**
	 * 获取用户的登录信息，此几口只能在页面加载完全以后才能调用
	 */
	DjUser.getUserInfo = function(){
		//获取token信息
		strToken = getCookieDJ(djtoken);
		//获取加密uid信息
		strUid = getCookieDJ(djuid);
		//获取过期时间
		strExpiry = getCookieDJ(djexpiry);
		if(isValid(strToken) && isValid(strUid) && isValid(strExpiry)){
			var res={};
			res.djfrttok = strToken;
			//查询出明文信息
			if(strUid.indexOf("_")>0){
				var strPlainUid = strUid.substring(strUid.indexOf("_")+1);
				strUid = strUid.substring(0, strUid.indexOf("_"));
				res.djfrtplainuid = strPlainUid;
			}
			res.djfrtuid = strUid;
			res.djfrtexpire = strExpiry;
			return res;
		}
		return null;
	}

	/**
	 * 校验用户信息是否合法，只能在后续逻辑过程中进行校验
	 */
	DjUser.checkUser = function(callback){
		var jsonResult = DjUser.getUserInfo();
		if(jsonResult==null){
			var code=-1;
			var desc="user has not login!!!";
			callback.call(window, code, desc);
		}else{
			//发送异步请求进行校验
			var callbackName = "djCheckCallback_"+(new Date()).getTime();
			window[callbackName]=function(code,desc){
				callback.call(window, code, desc);
				//清除不再使用的回调函数
				setTimeout(function(){window[callbackName]=undefined;},1000);
			};
			var JSONP=document.createElement("script");
			JSONP.type="text/javascript";
			JSONP.src=strURLPrefix+"/user/vertify4callback?callback="+callbackName+"&token="+jsonResult.djfrttok+"&uid="+jsonResult.djfrtuid+"&expiry="+jsonResult.djfrtexpire;
			document.getElementsByTagName("head")[0].appendChild(JSONP);
		}
	}
  /**
   * 在平台app下主动获取cookie
   */
  DjUser.getUserToken = function(successFun, failFun) {
    console.log('当前环境：', client);
    if (client != "H5" && client != "GJAPP" && client != 'LEYP' && isdeviceready) {
      try {
        CD58UtilsPlugin.util('getUserToken', null,
            function(data) {//success call back
              var result = {};
              result.code = "0";
              result.desc = "success";
              result.data = data;
              successFun.call(window, result);
            }, function(data) {
              var result={};
              result.code="-1";
              result.desc=data.msgKey;
              failFun.call(window,result);
            });

      } catch (e) {
        console.log(e);
        console.log('调用getUserToken方法失败');
      }
    } else {
      var result={};
      result.code="-1";
      result.desc='not app';
      failFun.call(window, result);
		}
	}
	/**
	 *登录接口，只用于APP端
	 */
	DjUser.login4callback = function(successFun, failFun,bu){
		if(!bu){
			bu="0";
		}
		window.console && console.log("%%%%%%");
		if(client == "H5"){//微信或者H5渠道
			var result={};
			result.code="-1";
			result.desc="not app";
			failFun.call(window,result);
		}else if(client == "GJAPP"){//赶集渠道
			window.console && console.log("【DjUser.login4callback】client is GJAPP");
			var result = DjUser.getUserInfo();
			if(result!=null){
				failFun.call(window,"user has login, please logout first!");
				return;
			}
			//如果是赶集app来源,则需要获取赶集用户信息
			GanJi_NativeJS.login(successFun, failFun);
		}else if(client == "LEYP"){//乐视渠道
			var result={};
			result.code="-1";
			result.desc="not app";
			failFun.call(window,result);
			return;
		}else{//到家APP渠道
			if(!isdeviceready){
				 showloginwhenReady_jumpsuccess = successFun;
	             showloginwhenReady_jumpcancel = failFun;
	             showloginwhenReady = true;
			}else{//调起APP本地登录
                var obj = createLoginParamObj();
                obj['bu'] = bu
				CD58UtilsPlugin.util("loginfunction",obj,
				function(data){//success call back
					var result={};
					result.code="0";
					result.desc="success";
					successFun.call(window, result);
				},
				function(data){//failed call back
					var result={};
					result.code="-1";
					result.desc=data.msgKey;
					failFun.call(window,result);
				}
				);
			}
		}
	}
	// 家政自定义登录处理，params中有 'loginUrl'自定义登录地址 && 业务线为'101'时跳转到家政自己的登录页
	var jzLoginParamHandle = function(params){
		var isJump = false;
		if (typeof params === "object" && params.params.loginUrl && Number(params.params.businessId) === 101) {
			isJump = true;
		}
		return isJump;
	}
	// 微信公众号绑定时djbusiness和djclient需要种在cookie中
	var wxLoginParamHandle = function(redirectParam){
		// enOpenid加密的openid，djbusiness 业务线，djclient端
		if (redirectParam && redirectParam.enOpenid && redirectParam.djbusiness && redirectParam.djclient) {
			var expiryDate = new Date();
			expiryDate.setTime(expiryDate.getTime()+30*24*60*60*1000);
			// 业务线，passport埋点，必填
			djCookieUtils.setCookie('djbusiness', redirectParam.djbusiness, expiryDate.toUTCString());
			// 端，passport埋点，必填
			djCookieUtils.setCookie('djclient', redirectParam.djclient, expiryDate.toUTCString());
		}
	}
	// 登录redirect参数处理 redirect可以传两种数据类型，string和object
    DjUser.loginParamsHandle = function(redirect) {
		if (typeof redirect === "string") {
			return {
				redirect: redirect
			};
		} else if (typeof redirect === "object") {
			return redirect;
		}
    }
	/**
	 *登录跳转到指定的新页面，此接口同时适用于H5、APP，H5情况下，登录成功以后，
	 * param redirect 可以传两种数据类型，string 或者 object
	 * 		string 登录成功后的跳转地址 示例：DjUser.prelogin(location.href)；
	 * 		object 跳转的页面及业务线参数 示例：DjUser.prelogin({
											  'redirect': location.href,
											  'params': {}
											});
	 * param failFun 登录失败后的回调地址
	 * param isAppRedirect 是否采用app方式的跳转规则
	 * param bu 业务线参数
	 */
	DjUser.login = function(redirect,failFun,isAppRedirect,bu){
		// 家政自定义登录处理，params中有 'loginUrl'自定义登录地址 && 业务线为'101'时跳转到家政自己的登录页，不是跳转到原登录页
		var loginUrl = jzLoginParamHandle(redirect) ? redirect.params.loginUrl : strURLPrefix+'/login';
		var redirectParam = DjUser.loginParamsHandle(redirect); // redirect参数处理方法
		var redirect = redirectParam.redirect; // 跳转路径
		if(!bu){
			bu="0";
		}
		var result = DjUser.getUserInfo();
		if(result!=null){
			failFun.call(window,"user has login, please logout first!");
			return;
		}
		//将相对路径补全为绝对路径
		redirect = filterReturnUrl(redirect);
		if(client == "H5"){//微信H5
			redirect = encodeURIComponent(redirect);
			if(redirectParam.params) {
				wxLoginParamHandle(redirectParam.params); // 微信公众号绑定cookie
				redirect = redirect + "&custom=" + encodeURIComponent(JSON.stringify(redirectParam.params));
			}
			window.location=loginUrl+"?returnUrl="+redirect+"&bu="+bu;
		}else if(client == "GJAPP"){//赶集
			window.console && console.log("【DjUser.login】client is GJAPP");
			//如果是赶集app来源,则需要获取赶集用户信息
			redirect = encodeURIComponent(redirect);
			GanJi_NativeJS.login(redirect,failFun);
		}else if(client == "LEYP"){//乐视
			//redirect = encodeURIComponent(redirect);
			LeYP_NativeJS.login(redirect,failFun);
        }
        // else if (client == "58APP") {//58同城
			// redirect = encodeURIComponent(redirect);
			// var callbackName = "dj58appCallback_"+(new Date()).getTime();
			// window[callbackName]=function(code,authUrl){
			// 	window.location.replace(authUrl);
			// };
			// /**
			//  * 发起JSONP异步调用
			//  * 访问后台服务，验证该信息是否有手机号
			//  */
			// var JSONP=document.createElement("script");
			// JSONP.type="text/javascript";
			// JSONP.src=strURLPrefix + "/thirdoauth/58auth/showByJsonP?callback="+callbackName+"&platform=m&returnUrl=" + redirect;
			// document.getElementsByTagName("head")[0].appendChild(JSONP);
        //
        // }
		else {//到家APP
			if(!isdeviceready){
				 showloginwhenReady_jumpsuccess = function(data){
					if(isAppRedirect!=undefined && isAppRedirect==true){
						CD58RouterPlugin.backNavigateToWebView(redirect);
					}else{
						window.location=redirect;
					}
	            };
	            showloginwhenReady_jumpcancel = function(data){
					if(isAppRedirect!=undefined && isAppRedirect==true){
						CD58RouterPlugin.backNavigateToWebView(redirect);
					}else{
						window.location=redirect;
					}
	            };
	            showloginwhenReady = true;
			}else{
                var obj = createLoginParamObj();
                obj['bu'] = bu
				//调起APP本地登录
				CD58UtilsPlugin.util("loginfunction",obj,
				function(data){//success call back
					if(isAppRedirect!=undefined && isAppRedirect==true){
						CD58RouterPlugin.backNavigateToWebView(redirect);
					}else{
						window.location=redirect;
					}
				},
				function(data){//failed call back
					if(data.msgKey="alreadyloggedin"){
						failFun.call(window,"user has login, please logout first!");
					}else{
						failFun.call(window,"system exception, please contact administrator!");
					}
				}
				);
			}
		}
	}

	/**
	 * 前置登录需要跳转时，就需要在后台获取用户信息的情况
	 */
	DjUser.prelogin = function(redirect,failFun,isAppRedirect,bu){
		// 家政自定义登录处理，params中有 'loginUrl'自定义登录地址 && 业务线为'101'时跳转到家政自己的登录页，不是跳转到原登录页
		var loginUrl = jzLoginParamHandle(redirect) ? redirect.params.loginUrl : strURLPrefix+'/prelogin';
		var redirectParam = DjUser.loginParamsHandle(redirect); // redirect参数处理方法
		var redirect = redirectParam.redirect; // 跳转路径
		if(!bu){
			bu="0";
		}
		var result = DjUser.getUserInfo();
		if(result!=null){
			failFun.call(window,"user has login, please logout first!");
			return;
		}
		//将相对路径补全为绝对路径
		redirect = filterReturnUrl(redirect);
		window.console && console.info("channel id:"+client);
		if(client == "H5"){
			redirect = encodeURIComponent(redirect);
			if(redirectParam.params) {
				wxLoginParamHandle(redirectParam.params); // 微信公众号绑定cookie
				redirect = redirect + "&custom=" + encodeURIComponent(JSON.stringify(redirectParam.params));
			}
			window.location=loginUrl+"?returnUrl="+redirect+"&bu="+bu;
		}else if(client == "GJAPP"){//赶集APP
			redirect = encodeURIComponent(redirect);
			DjUser.login(redirect,failFun,isAppRedirect);
		}else if(client == "LEYP"){//乐视黄页
			//redirect = encodeURIComponent(redirect);
			LeYP_NativeJS.login(redirect,failFun);
		}
		// else if(client == "58APP"){//58同城
		// 	DjUser.login(redirect,failFun,isAppRedirect);
		// }
		else{
			if(!isdeviceready){
				 showloginwhenReady_jumpsuccess = function(data){
					if(isAppRedirect!=undefined && isAppRedirect==true){
						CD58RouterPlugin.backNavigateToWebView(redirect);
					}else{
						window.location=redirect;
					}
	            };
	            showloginwhenReady_jumpcancel = function(data){
					if(isAppRedirect!=undefined && isAppRedirect==true){
						CD58RouterPlugin.backNavigateToWebView(redirect);
					}else{
						window.location=redirect;
					}
	            };
	            showloginwhenReady = true;
			}else{
				//调起APP本地登录
                var obj = createLoginParamObj();
                obj['bu'] = bu
				CD58UtilsPlugin.util("loginfunction",obj,
				function(data){//success call back
					if(isAppRedirect!=undefined && isAppRedirect==true){
						CD58RouterPlugin.backNavigateToWebView(redirect);
					}else{
						window.location=redirect;
					}
				},
				function(data){//failed call back
					if(data.msgKey="alreadyloggedin"){
						failFun.call(window,"user has login, please logout first!");
					}else{
						failFun.call(window,"system exception, please contact administrator!");
					}
				}
				);
			}
		}
	}

	DjUser.quickLogin = function(successFun,failFun,startPageFun,bu){
		if(!bu){
			bu = "0";
		}
		if(client !="APP" && client !="H5"){
			failFun.call(window, "只支持APP或H5中进行快捷登陆！");
			return;
		}
		if(client =="APP") {
			//调起APP本地登录
			CD58UtilsPlugin.util("loginfunctiondialog", {'bu': bu},
				function (data) {//success call back
					successFun.call(window, data);
				},
				function (data) {//failed call back
					if (data.msgKey == "alreadyloggedin") {
						failFun.call(window, "user has login, please logout first!");
					} else if (data.msgKey == "startPage") {
						startPageFun.call(window);
					} else {
						failFun.call(window, "system exception, please contact administrator!");
					}
				}
			);
		}else if(client =="H5") {
			popupLogin(successFun,failFun,startPageFun,bu);
		}
	}

	DjUser.logout = function(redirect,failFun){
		if(client == "APP" || client == "GJAPP" || client == "LEYP"){
			failFun.call(window, "APP环境下只能走本地退出登录！");
			return;
		}
		if(redirect==undefined || redirect==null || redirect.trim()==""){
			failFun.call(window, "请输入正确的回调地址！");
			return;
		}
		var result = DjUser.getUserInfo();
		if(result==null){
			failFun.call(window, "已经退出登录啦！");
			return;
		}

		//将本域下的cookie清除，再跳转到其他域进行退出登录操作，微信站点与主站的cookie，由后台清除
		if(isWebchatDomain()==false && isSameDomain()==false){
     		cleanCookie();
     	}
     	cleanCookie58();
		//在prelogin的时候，如果用户点击完登录以后，直接点击退出登录，则PATH中的用户信息又会被携带，并被拦截器拦截，则又会将用户信息回填到cookie当中，所以需要将PATH中的用户信息去掉
		redirect = filterReturnUrl(redirect);
		redirect = encodeURIComponent(redirect);

		// if(protocol=="http:"){
		// 	window.location = strURLCross58 +"/user/logout?returnUrl="+ redirect;
		// }else
		// if(protocol=="https:"){//https协议，直接跳转，不用调起登录
			window.location.replace(strURLPrefix +"/user/prilogout?returnUrl="+ redirect);
		// }
	}

	/**
	 * 配置单点登录的路径
	 */
	DjUser.config=function(url){
		strURLPrefix = url;
	}

	/**
	 * 获取配置信息
	 */
	DjUser.getConfig=function(url){
		return strURLPrefix;
	}

	/**
	 * 获取经纬度信息
	 */
	DjUser.getLocation = function(callBack){
		GanJi_NativeJS.getLocation(callBack);
	}

	/**
	 * 赶集逐级返回
	 */
	DjUser.goBack = function(tagUrl){
		GanJi_NativeJS.goBack(tagUrl);
	}

	/**
	 * 获取当前所在的渠道
	 * @returns {string}
     */
	DjUser.client=function(){
		return client;
	}

    // 添加平台支付宝小程序SDK兼容逻辑
    function loadDjAlipayH5Sdk () {
        function djAlipayH5Callback () {
            // 注册到家sdk加载后的动作
            console.log('djAliPaySdkReadyCb passport callback ...')
            var djalipay = window.djalipay
            if (!djalipay) {
                console.error('djalipay sdk 加载之后,djalipay:.' + djalipay)
                return
            }
            DjUser.prelogin =  DjUser.login = function (redirect, failFun, isAppRedirect, bu) {
                djalipay.zfbMiniLogin(function () {
                    //将相对路径补全为绝对路径
                    redirect = filterReturnUrl(redirect)
                    window.location.href = filterReturnUrl(redirect)
                }, failFun)
            }

            DjUser.quickLogin = djalipay.zfbMiniLogin

            var logout = DjUser.logout
            DjUser.logout = function (backUrl, failFun) {
                djalipay.zfbMiniLogout()
                logout.call(DjUser, backUrl, failFun)
            }
        }

        var __djAlipayH5 = window.__djAlipayH5
        if (__djAlipayH5.hasReady) {
            djAlipayH5Callback()
        } else {
            console.log('push djAlipayH5Callback ...')
            __djAlipayH5.readyCallback.push(djAlipayH5Callback)
        }

        // 分别加载支付宝sdk和到家支付宝sdk
        var aliJsSdk = __djAlipayH5.aliJsSdk
        var djAliPaySdk = __djAlipayH5.djAliPaySdk
        __djAlipayH5.loadRes(aliJsSdk, function () {
            console.log('load ' + aliJsSdk.url + ' success')
            __djAlipayH5.loadRes(djAliPaySdk, function () {
                console.log('load ' + djAliPaySdk.url + ' success')
            })
        })

    }
    if (isPtZfbMini) {
        loadDjAlipayH5Sdk()
    }

    window.DjUser = DjUser;
	return DjUser;
})();
